name: Release CI
on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  workflow_dispatch:
  
env:
  UV_SYSTEM_PYTHON: 1
jobs:
  macos:
    runs-on: macos-13
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Upgrade pip and install build dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install maturin build twine
      
      - name: Build wheel (macOS)
        uses: PyO3/maturin-action@v1
        with:
          args: --release --target x86_64-apple-darwin --out dist
        
      - name: List wheels
        run: ls -lh dist/
        
      - name: Install wheel (macOS)
        run: uv pip install --force-reinstall dist/*.whl
        
      - name: Import test
        run: python -c "import bomiot_check"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ github.job }}-universal-${{ matrix.python-version }}
          path: dist
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}

      - name: Install vcpkg & OpenSSL
        run: |
          git clone https://github.com/Microsoft/vcpkg C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg.exe install openssl:x64-windows
      
      - name: Set env vars
        run: |
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
          echo "OPENSSL_DIR=C:\vcpkg\installed\x64-windows" >> $env:GITHUB_ENV
          echo "OPENSSL_NO_VENDOR=1" >> $env:GITHUB_ENV
      
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
      - name: Install build wheel
        shell: bash
        run: |
          uv pip install --force-reinstall dist/*.whl
          cd ~ && python -c 'import bomiot_check'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ github.job }}-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Find openssl.pc
        run: |
          find /usr -name "openssl.pc"
          pkg-config --libs --cflags openssl
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
        
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Build x86_64 Wheels
        if: matrix.target == 'x86_64'
        uses: PyO3/maturin-action@v1
        with:
          command: --version
      
      - name: Install cibuildwheel
        run: uv pip install cibuildwheel

      # 构建所有 Python 版本和平台的 wheel
      - name: Build wheels
        run: cibuildwheel --output-dir dist

      - name: List built wheels
        run: ls -lh dist/  

      - name: Install build wheel
        if: matrix.target == 'x86_64'
        run: |
          uv pip install --force-reinstall dist/*.whl
          cd ~ && python -c 'import bomiot_check'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ github.job }}-${{ matrix.target }}-"3.12"
          path: dist
  merge:
    name: Building Single Artifact
    runs-on: ubuntu-latest
    needs: [macos, windows, linux]
    steps:
      - name: Downloading all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: wheels-*
          merge-multiple: true
      - run: |
          echo "Listing directories"
          ls -R
      - name: Uploading Artifact's Bundle
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: artifacts

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, merge]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          uv pip install --upgrade twine
          twine upload --skip-existing *