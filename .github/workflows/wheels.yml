name: Build universal abi3 wheels for Python 3.9+ on Windows, macOS, Linux

on:
  push:
    branches: [main, master]
    tags:
      - '*'  # 当推送以 v 开头的标签时触发发布
  pull_request:

jobs:
  build_abi3_wheels:
    name: Build abi3 wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1. 检出仓库代码
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install OpenSSL and dependencies
        if: runner.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
          echo "PYO3_STATIC_LIB=1" >> $GITHUB_ENV

      - name: Install vcpkg & OpenSSL
        if: runner.os == 'windows'
        run: |
          git clone https://github.com/Microsoft/vcpkg C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg.exe install openssl:x64-windows
      
      - name: Set env vars
        if: runner.os == 'windows'
        run: |
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
          echo "OPENSSL_DIR=C:\vcpkg\installed\x64-windows" >> $env:GITHUB_ENV
          echo "OPENSSL_NO_VENDOR=1" >> $env:GITHUB_ENV
      


      # 2. 安装 Rust 工具链
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 3. 安装 Python 3.9（abi3 轮子最低要求）
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: 查看 Python 版本
        run: python --version
      
      # 4. 升级 pip 并安装 build dependencies
      - name: Upgrade pip and install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin build twine

      # 5. 使用 maturin 构建 abi3 wheel
      - name: Build wheel
        run: |
          echo "开始使用Maturin构建 abi3 wheel.............................."
          python -m maturin build --release --interpreter python3.9 --target-dir dist

      # 6. 上传 wheel 产物
      - name: Upload linux built wheels
        if: runner.os == 'linux' 
        uses: actions/upload-artifact@v4
        with:
          name: abi3-wheels-${{ runner.os }}
          path: /home/runner/work/bomiot_check/bomiot_check/target/wheels/bomiot_check-0.2.2-cp39-abi3-manylinux_2_34_x86_64.whl
        continue-on-error: true

      - name: Upload macos built wheels
        if: runner.os == 'linux' 
        uses: actions/upload-artifact@v4
        with:
          name: abi3-wheels-${{ runner.os }}
          path: /Users/runner/work/bomiot_check/bomiot_check/target/wheels/bomiot_check-0.2.2-cp39-abi3-macosx_11_0_arm64.whl
        continue-on-error: true

      - name: Upload windows built wheels
        if: runner.os == 'windows' 
        uses: actions/upload-artifact@v4
        with:
          name: abi3-wheels-${{ runner.os }}
          path: D:\a\bomiot_check\bomiot_check\target\wheels\bomiot_check-0.2.2-cp39-abi3-win_amd64.whl
        continue-on-error: true

      # 7. 构建并上传 sdist
      - name: Build sdist
        run: |
          echo "开始构建tar包................................"
          python -m build --sdist --outdir dist

      - name: Upload linux sdist
        if: runner.os == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: sdist-${{ runner.os }}
          path: /home/runner/work/bomiot_check/bomiot_check/target/wheels/bomiot_check-0.2.2.tar.gz
        
      - name: Upload macos sdist
        if: runner.os == 'maxos'
        uses: actions/upload-artifact@v4
        with:
          name: sdist-${{ runner.os }}
          path: /Users/runner/work/bomiot_check/bomiot_check/target/wheels/bomiot_check-0.2.2.tar.gz

      - name: Upload windows sdist
        if: runner.os == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: sdist-${{ runner.os }}
          path: D:\a\bomiot_check\bomiot_check\target\wheels\bomiot_check-0.2.2.tar.gz


      # # 8. 发布到 PyPI
      # - name: Publish to PyPI
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      #   run: |
      #     for file in $(ls **/*)
      #     do
      #       twine upload -u $TWINE_USERNAME -p $TWINE_PASSWORD $file || continue
      #     done
