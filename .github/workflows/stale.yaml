name: Release CI
on:
  push:
    branches: [main, master]
    tags:
      - v*
  workflow_dispatch:
  
env:
  UV_SYSTEM_PYTHON: 1
jobs:
  macos:
    runs-on: macos-13
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Upgrade pip and install build dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install maturin build twine
      
      - name: Build wheel (macOS)
        uses: PyO3/maturin-action@v1
        with:
          args: --release --target x86_64-apple-darwin --out dist
        
      - name: List wheels
        run: ls -lh dist/
        
      - name: Install wheel (macOS)
        run: uv pip install --force-reinstall dist/*.whl
        
      - name: Import test
        run: python -c "import bomiot_check"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ github.job }}-universal-${{ matrix.python-version }}
          path: dist
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}

      - name: Install vcpkg & OpenSSL
        run: |
          git clone https://github.com/Microsoft/vcpkg C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg.exe install openssl:x64-windows
      
      - name: Set env vars
        run: |
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
          echo "OPENSSL_DIR=C:\vcpkg\installed\x64-windows" >> $env:GITHUB_ENV
          echo "OPENSSL_NO_VENDOR=1" >> $env:GITHUB_ENV
      
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
      - name: Install build wheel
        shell: bash
        run: |
          uv pip install --force-reinstall dist/*.whl
          cd ~ && python -c 'import bomiot_check'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ github.job }}-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      
      - name: Find openssl.pc
        run: |
          find /usr -name "openssl.pc"
          pkg-config --libs --cflags openssl
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
        
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        env:
          PKG_CONFIG_PATH: /usr/lib64/pkgconfig
          OPENSSL_DIR: /usr
          OPENSSL_INCLUDE_DIR: /usr/include
          OPENSSL_LIB_DIR: /usr/lib64
          OPENSSL_NO_VENDOR: "1"
          PYO3_STATIC_LIB: "1"
        with:
          docker-options: |
            -e PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig
            -e OPENSSL_DIR=/usr
            -e OPENSSL_INCLUDE_DIR=/usr/include
            -e OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu
            -e OPENSSL_NO_VENDOR=1
            -e PYO3_STATIC_LIB=1
          before-script-linux: |
            yum install -y openssl-devel pkgconfig
            rustc --version
            find /usr -name "openssl.pc"
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist
        
      - name: Upgrade pip and install build dependencies
        run: |
          uv pip install --upgrade pip
          uv pip install maturin build twine
      
      - name: Install build wheel
        if: matrix.target == 'x86_64'
        run: |
          uv pip install --force-reinstall dist/*.whl
          cd ~ && python -c 'import bomiot_check'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ github.job }}-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist
  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          [
            { version: "3.9", abi: "cp39-cp39" },
            { version: "3.10", abi: "cp310-cp310" },
            { version: "3.11", abi: "cp311-cp311" },
            { version: "3.12", abi: "cp312-cp312" },
          ]
        target: [aarch64, armv7]
    steps:
      - uses: actions/checkout@v4
      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        env:
          PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python.abi }}/lib
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist
      - uses: uraimo/run-on-arch-action@v2
        name: Install build wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          # Mount the dist directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/dist:/artifacts"
          install: |
            apt update -y
            apt install -y software-properties-common
            add-apt-repository -y ppa:deadsnakes/ppa
            apt update -y
            apt install -y gcc musl-dev python3-dev python${{ matrix.python.version }} python${{ matrix.python.version }}-venv
          run: |
            ls -lrth /artifacts
            python${{ matrix.python.version }} -m venv venv
            source venv/bin/activate
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install --force-reinstall /artifacts/*.whl
            cd ~ && python -c 'import bomiot_check'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ github.job }}-${{ matrix.target }}-${{ matrix.python.version }}-${{ matrix.python.abi }}
          path: dist
  merge:
    name: Building Single Artifact
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, linux-cross]
    steps:
      - name: Downloading all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: wheels-*
          merge-multiple: true
      - run: |
          echo "Listing directories"
          ls -R
      - name: Uploading Artifact's Bundle
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: artifacts

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, linux-cross, merge]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          uv pip install --upgrade twine
          twine upload --skip-existing *